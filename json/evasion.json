[0m
Matching Modules
================

   #  Name                                                 Disclosure Date  Rank    Check  Description
   -  ----                                                 ---------------  ----    -----  -----------
   0  evasion/windows/applocker_evasion_install_util                        normal  No     Applocker Evasion - .NET Framework Installation Utility
   1  evasion/windows/applocker_evasion_msbuild                             normal  No     Applocker Evasion - MSBuild
   2  evasion/windows/applocker_evasion_regasm_regsvcs                      normal  No     Applocker Evasion - Microsoft .NET Assembly Registration Utility
   3  evasion/windows/applocker_evasion_workflow_compiler                   normal  No     Applocker Evasion - Microsoft Workflow Compiler
   4  evasion/windows/applocker_evasion_presentationhost                    normal  No     Applocker Evasion - Windows Presentation Foundation Host
   5  evasion/windows/syscall_inject                                        normal  No     Direct windows syscall evasion technique
   6  evasion/windows/windows_defender_exe                                  normal  No     Microsoft Windows Defender Evasive Executable
   7  evasion/windows/windows_defender_js_hta                               normal  No     Microsoft Windows Defender Evasive JS.Net and HTA
   8  evasion/windows/process_herpaderping                                  normal  No     Process Herpaderping evasion technique


Interact with a module by name or index. For example [32minfo 8[0m, [32muse 8[0m or [32muse evasion/windows/process_herpaderping[0m

[0m{"platform":"Windows","arch":"x86, x64","references":["https://attack.mitre.org/techniques/T1118/"],"name":"Applocker Evasion - .NET Framework Installation Utility","fullname":"evasion/windows/applocker_evasion_install_util","authors":["Nick Tyrer \u003c@NickTyrer\u003e","Casey Smith"],"rank":"Normal","description":"This module will assist you in evading Microsoft Windows Applocker and Software Restriction Policies. This technique utilises the Microsoft signed binary InstallUtil.exe to execute user supplied code.","options":[{"name":"FILENAME","display_value":"install_util.txt","required":"true","description":"Filename for the evasive file (default: install_util.txt)"}]}
[0m{"platform":"Windows","arch":"x86, x64","references":["https://attack.mitre.org/techniques/T1127/"],"name":"Applocker Evasion - MSBuild","fullname":"evasion/windows/applocker_evasion_msbuild","authors":["Nick Tyrer \u003c@NickTyrer\u003e","Casey Smith"],"rank":"Normal","description":"This module will assist you in evading Microsoft Windows Applocker and Software Restriction Policies. This technique utilises the Microsoft signed binary MSBuild.exe to execute user supplied code.","options":[{"name":"FILENAME","display_value":"msbuild.txt","required":"true","description":"Filename for the evasive file (default: msbuild.txt)"}]}
[0m{"platform":"Windows","arch":"x86, x64","references":["https://attack.mitre.org/techniques/T1121/"],"name":"Applocker Evasion - Microsoft .NET Assembly Registration Utility","fullname":"evasion/windows/applocker_evasion_regasm_regsvcs","authors":["Nick Tyrer \u003c@NickTyrer\u003e","Casey Smith"],"rank":"Normal","description":"This module will assist you in evading Microsoft Windows Applocker and Software Restriction Policies. This technique utilises the Microsoft signed binaries RegAsm.exe or RegSvcs.exe to execute user supplied code.","options":[{"name":"SNK_FILE","display_value":"key.snk","required":"true","description":"Filename for the .snk file (default: key.snk)"},{"name":"TXT_FILE","display_value":"regasm_regsvcs.txt","required":"true","description":"Filename for the evasive file (default: regasm_regsvcs.txt)"}]}
[0m{"platform":"Windows","arch":"x86, x64","references":["https://posts.specterops.io/arbitrary-unsigned-code-execution-vector-in-microsoft-workflow-compiler-exe-3d9294bc5efb"],"name":"Applocker Evasion - Microsoft Workflow Compiler","fullname":"evasion/windows/applocker_evasion_workflow_compiler","authors":["Nick Tyrer \u003c@NickTyrer\u003e","Matt Graeber"],"rank":"Normal","description":"This module will assist you in evading Microsoft Windows Applocker and Software Restriction Policies. This technique utilises the Microsoft signed binaries Microsoft.Workflow.Compiler.exe to execute user supplied code.","options":[{"name":"XML_FILE","display_value":"workflow.xml","required":"true","description":"Filename for the .xml file (default: workflow.xml)"},{"name":"XOML_FILE","display_value":"workflow.xoml","required":"true","description":"Filename for the .xoml file (default: workflow.xoml)"}]}
[0m{"platform":"Windows","arch":"x86","references":null,"name":"Applocker Evasion - Windows Presentation Foundation Host","fullname":"evasion/windows/applocker_evasion_presentationhost","authors":["Nick Tyrer \u003c@NickTyrer\u003e","Casey Smith"],"rank":"Normal","description":"This module will assist you in evading Microsoft Windows Applocker and Software Restriction Policies. This technique utilises the Microsoft signed binary PresentationHost.exe to execute user supplied code.","options":[{"name":"CSPROJ_FILE","display_value":"presentationhost.csproj","required":"true","description":"Filename for the .csproj file (default: presentationhost.csproj)"},{"name":"CS_FILE","display_value":"presentationhost.xaml.cs","required":"true","description":"Filename for the .xaml.cs file (default: presentationhost.xaml.cs)"},{"name":"MANIFEST_FILE","display_value":"presentationhost.manifest","required":"true","description":"Filename for the .manifest file (default: presentationhost.manifest)"}]}
[0m{"platform":"Windows","arch":"x64","references":null,"name":"Direct windows syscall evasion technique","fullname":"evasion/windows/syscall_inject","authors":["Yaz (kensh1ro)"],"rank":"Normal","description":"This module allows you to generate a Windows EXE that evades Host-based security products such as EDR/AVs. It uses direct windows syscalls to achieve stealthiness, and avoid EDR hooking. please try to use payloads that use a more secure transfer channel such as HTTPS or RC4 in order to avoid payload's network traffic getting caught by network defense mechanisms. NOTE: for better evasion ratio, use high SLEEP values","options":[{"name":"CIPHER","display_value":"chacha","required":"true","description":"Shellcode encryption type (Accepted: chacha, rc4)"},{"name":"FILENAME","display_value":"lKIRh.exe","required":"true","description":"Filename for the evasive file (default: random)"},{"name":"SLEEP","display_value":"20000","required":"false","description":"Sleep time in milliseconds before executing shellcode"}]}
[0m{"platform":"Windows","arch":"x86","references":null,"name":"Microsoft Windows Defender Evasive Executable","fullname":"evasion/windows/windows_defender_exe","authors":["sinn3r \u003csinn3r@metasploit.com\u003e"],"rank":"Normal","description":"This module allows you to generate a Windows EXE that evades against Microsoft Windows Defender. Multiple techniques such as shellcode encryption, source code obfuscation, Metasm, and anti-emulation are used to achieve this. For best results, please try to use payloads that use a more secure channel such as HTTPS or RC4 in order to avoid the payload network traffic getting caught by antivirus better.","options":[{"name":"FILENAME","display_value":"lmeRTCjE.exe","required":"true","description":"Filename for the evasive file (default: random)"}]}
[0m{"platform":"Windows","arch":"x64","references":null,"name":"Microsoft Windows Defender Evasive JS.Net and HTA","fullname":"evasion/windows/windows_defender_js_hta","authors":["sinmygit","Shelby Pace"],"rank":"Normal","description":"This module will generate an HTA file that writes and compiles a JScript.NET file containing shellcode on the target machine. After compilation, the generated EXE will execute the shellcode without interference from Windows Defender. It is recommended that you use a payload that uses RC4 or HTTPS for best experience.","options":[{"name":"FILENAME","display_value":"GZo.hta","required":"true","description":"Filename for the evasive file (default: random)"}]}
[0m{"platform":"Windows","arch":"x64, x86","references":["https://jxy-s.github.io/herpaderping/","https://github.com/jxy-s/herpaderping"],"name":"Process Herpaderping evasion technique","fullname":"evasion/windows/process_herpaderping","authors":["Johnny Shaw","Christophe De La Fuente"],"rank":"Normal","description":"This module allows you to generate a Windows executable that evades security products such as Windows Defender, Avast, etc. This uses the Process Herpaderping technique to bypass Antivirus detection. This method consists in obscuring the behavior of a running process by modifying the executable on disk after the image has been mapped in memory (more details https://jxy-s.github.io/herpaderping/). First, the chosen payload is encrypted and embedded in a loader Portable Executable (PE) file. This file is then included in the final executable. Once this executable is launched on the target, the loader PE is dropped on disk and executed, following the Process Herpaderping technique. Note that the name of the file that is being dropped is randomly generated. However, it is possible to configure the destination path from Metasploit (see WRITEABLE_DIR option description). Here is the main workflow: 1. Retrieve the target name (where the PE loader will be dropped). 2. Retrieve the PE loader from the binary and write it on disk. 3. Create a section object and create a process from the mapped image. 4. Modify the file content on disk by copying another (inoffensive) executable or by using random bytes (see REPLACED_WITH_FILE option description). 5. Create the main Thread. The source code is based on Johnny Shaw's PoC (https://github.com/jxy-s/herpaderping).","options":[{"name":"ENCODER","display_value":"","required":"false","description":"A specific encoder to use (automatically selected if not set)"},{"name":"FILENAME","display_value":"WlG.exe","required":"true","description":"Filename for the evasive file (default: random)"},{"name":"REPLACED_WITH_FILE","display_value":"%SystemRoot%\\System32\\calc.exe","required":"false","description":"File to replace the target with. If not set, the target file will be filled with random bytes (WARNING! it is likely to be catched by AV)."},{"name":"WRITEABLE_DIR","display_value":"%TEMP%","required":"true","description":"Where to write the loader on disk"}]}
[0m