[0m
Matching Modules
================

   #   Name                                  Disclosure Date  Rank       Check  Description
   -   ----                                  ---------------  ----       -----  -----------
   0   encoder/x86/add_sub                                    manual     No     Add/Sub Encoder
   1   encoder/x86/alpha_mixed                                low        No     Alpha2 Alphanumeric Mixedcase Encoder
   2   encoder/x86/unicode_mixed                              manual     No     Alpha2 Alphanumeric Unicode Mixedcase Encoder
   3   encoder/x86/unicode_upper                              manual     No     Alpha2 Alphanumeric Unicode Uppercase Encoder
   4   encoder/x86/alpha_upper                                low        No     Alpha2 Alphanumeric Uppercase Encoder
   5   encoder/x86/avoid_utf8_tolower                         manual     No     Avoid UTF8/tolower
   6   encoder/x86/avoid_underscore_tolower                   manual     No     Avoid underscore/tolower
   7   encoder/x86/bmp_polyglot                               manual     No     BMP Polyglot
   8   encoder/cmd/brace                                      low        No     Bash Brace Expansion Command Encoder
   9   encoder/x86/bloxor                                     manual     No     BloXor - A Metamorphic Block Based XOR Encoder
   10  encoder/cmd/ifs                                        low        No     Bourne ${IFS} Substitution Command Encoder
   11  encoder/mipsbe/byte_xori                               normal     No     Byte XORi Encoder
   12  encoder/mipsle/byte_xori                               normal     No     Byte XORi Encoder
   13  encoder/x86/context_cpuid                              manual     No     CPUID-based Context Keyed Payload Encoder
   14  encoder/x86/call4_dword_xor                            normal     No     Call+4 Dword XOR Encoder
   15  encoder/x64/xor_dynamic                                normal     No     Dynamic key XOR Encoder
   16  encoder/x86/xor_dynamic                                normal     No     Dynamic key XOR Encoder
   17  encoder/cmd/echo                                       good       No     Echo Command Encoder
   18  encoder/cmd/generic_sh                                 manual     No     Generic Shell Variable Substitution Command Encoder
   19  encoder/x64/xor_context                                normal     No     Hostname-based Context Keyed Payload Encoder
   20  encoder/x86/jmp_call_additive                          normal     No     Jump/Call XOR Additive Feedback Encoder
   21  encoder/x86/nonalpha                                   low        No     Non-Alpha Encoder
   22  encoder/x86/nonupper                                   low        No     Non-Upper Encoder
   23  encoder/php/base64                                     [32mgreat[0m      No     PHP Base64 Encoder
   24  encoder/ppc/longxor                                    normal     No     PPC LongXOR Encoder
   25  encoder/ppc/longxor_tag                                normal     No     PPC LongXOR Encoder
   26  encoder/cmd/perl                                       normal     No     Perl Command Encoder
   27  encoder/x86/shikata_ga_nai                             [32mexcellent[0m  No     Polymorphic XOR Additive Feedback Encoder
   28  encoder/cmd/powershell_base64                          [32mexcellent[0m  No     Powershell Base64 Command Encoder
   29  encoder/x86/service                                    manual     No     Register Service
   30  encoder/ruby/base64                                    [32mgreat[0m      No     Ruby Base64 Encoder
   31  encoder/sparc/longxor_tag                              normal     No     SPARC DWORD XOR Encoder
   32  encoder/x86/single_static_bit                          manual     No     Single Static Bit
   33  encoder/x86/countdown                                  normal     No     Single-byte XOR Countdown Encoder
   34  encoder/x86/opt_sub                                    manual     No     Sub Encoder (optimised)
   35  encoder/generic/none                                   normal     No     The "none" Encoder
   36  encoder/generic/eicar                                  manual     No     The EICAR Encoder
   37  encoder/x86/fnstenv_mov                                normal     No     Variable-length Fnstenv/mov Dword XOR Encoder
   38  encoder/mipsbe/longxor                                 normal     No     XOR Encoder
   39  encoder/mipsle/longxor                                 normal     No     XOR Encoder
   40  encoder/x64/xor                                        normal     No     XOR Encoder
   41  encoder/x86/xor_poly                                   normal     No     XOR POLY Encoder
   42  encoder/x64/zutto_dekiru                               manual     No     Zutto Dekiru
   43  encoder/cmd/printf_php_mq                              manual     No     printf(1) via PHP magic_quotes Utility Command Encoder
   44  encoder/x86/context_stat                               manual     No     stat(2)-based Context Keyed Payload Encoder
   45  encoder/x86/context_time                               manual     No     time(2)-based Context Keyed Payload Encoder


Interact with a module by name or index. For example [32minfo 45[0m, [32muse 45[0m or [32muse encoder/x86/context_time[0m

[0m{"platform":"All","arch":"x86","references":null,"name":"Add/Sub Encoder","fullname":"encoder/x86/add_sub","authors":["Melih Sarica \u003cms@sevure.com\u003e"],"rank":"Manual","description":"Encodes payload with add or sub instructions. This idea came from (offensive-security) muts' hp nnm 7.5.1 exploit.","options":[]}
[0m{"platform":"All","arch":"x86","references":null,"name":"Alpha2 Alphanumeric Mixedcase Encoder","fullname":"encoder/x86/alpha_mixed","authors":["pusscat \u003cpusscat@metasploit.com\u003e","skylined \u003cskylined@edup.tudelft.nl\u003e"],"rank":"Low","description":"Encodes payloads as alphanumeric mixedcase text. This encoder uses SkyLined's Alpha2 encoding suite. A pure alpha encoder is impossible without having a register that points at or near the shellcode. In a default configuration the first few bytes at the beginning are an fnstenv getpc stub (the same as used in shikata_ga_nai) and thus are not alphanumeric. You can set BufferRegister for full alpha (see Encoder options for details).","options":[{"name":"AllowWin32SEH","display_value":"false","required":"true","description":"Use SEH to determine the address of the stub (Windows only)"},{"name":"BufferOffset","display_value":"0","required":"false","description":"The offset to the buffer from the start of the register"},{"name":"BufferRegister","display_value":"","required":"false","description":"The register that points to the encoded payload"}]}
[0m{"platform":"All","arch":"x86","references":null,"name":"Alpha2 Alphanumeric Unicode Mixedcase Encoder","fullname":"encoder/x86/unicode_mixed","authors":["pusscat \u003cpusscat@metasploit.com\u003e","skylined \u003cskylined@edup.tudelft.nl\u003e"],"rank":"Manual","description":"Encodes payload as unicode-safe mixedcase text. This encoder uses SkyLined's Alpha2 encoding suite.","options":[{"name":"AllowWin32SEH","display_value":"false","required":"true","description":"Use SEH to determine the address of the stub (Windows only)"},{"name":"BufferOffset","display_value":"0","required":"false","description":"The offset to the buffer from the start of the register"},{"name":"BufferRegister","display_value":"ECX","required":"true","description":"The register that points to the encoded payload"}]}
[0m{"platform":"All","arch":"x86","references":null,"name":"Alpha2 Alphanumeric Unicode Uppercase Encoder","fullname":"encoder/x86/unicode_upper","authors":["pusscat \u003cpusscat@metasploit.com\u003e","skylined \u003cskylined@edup.tudelft.nl\u003e"],"rank":"Manual","description":"Encodes payload as unicode-safe uppercase text. This encoder uses SkyLined's Alpha2 encoding suite.","options":[{"name":"AllowWin32SEH","display_value":"false","required":"true","description":"Use SEH to determine the address of the stub (Windows only)"},{"name":"BufferOffset","display_value":"0","required":"false","description":"The offset to the buffer from the start of the register"},{"name":"BufferRegister","display_value":"ECX","required":"true","description":"The register that points to the encoded payload"}]}
[0m{"platform":"All","arch":"x86","references":null,"name":"Alpha2 Alphanumeric Uppercase Encoder","fullname":"encoder/x86/alpha_upper","authors":["pusscat \u003cpusscat@metasploit.com\u003e","skylined \u003cskylined@edup.tudelft.nl\u003e"],"rank":"Low","description":"Encodes payloads as alphanumeric uppercase text. This encoder uses SkyLined's Alpha2 encoding suite. A pure alpha encoder is impossible without having a register that points at or near the shellcode. In a default configuration the first few bytes at the beginning are an fnstenv getpc stub (the same as used in shikata_ga_nai) and thus are not alphanumeric. You can set BufferRegister for full alpha (see Encoder options for details).","options":[{"name":"AllowWin32SEH","display_value":"false","required":"true","description":"Use SEH to determine the address of the stub (Windows only)"},{"name":"BufferOffset","display_value":"0","required":"false","description":"The offset to the buffer from the start of the register"},{"name":"BufferRegister","display_value":"","required":"false","description":"The register that points to the encoded payload"}]}
[0m{"platform":"All","arch":"x86","references":null,"name":"Avoid UTF8/tolower","fullname":"encoder/x86/avoid_utf8_tolower","authors":["skape \u003cmmiller@hick.org\u003e"],"rank":"Manual","description":"UTF8 Safe, tolower Safe Encoder","options":[]}
[0m{"platform":"All","arch":"x86","references":null,"name":"Avoid underscore/tolower","fullname":"encoder/x86/avoid_underscore_tolower","authors":["skape \u003cmmiller@hick.org\u003e","juan vazquez \u003cjuan.vazquez@metasploit.com\u003e"],"rank":"Manual","description":"Underscore/tolower Safe Encoder used to exploit CVE-2012-2329. It is a modified version of the 'Avoid UTF8/tolower' encoder by skape. Please check the documentation of the skape encoder before using it. As the original, this encoder expects ECX pointing to the start of the encoded payload. Also BufferOffset must be provided if needed. The changes introduced are (1) avoid the use of the 0x5f byte (underscore) in because it is a badchar in the CVE-2012-2329 case and (2) optimize the transformation block, having into account more relaxed conditions about bad characters greater than 0x80.","options":[]}
[0m{"platform":"All","arch":"x86","references":null,"name":"BMP Polyglot","fullname":"encoder/x86/bmp_polyglot","authors":["Spencer McIntyre"],"rank":"Manual","description":"Encodes a payload in such a way that the resulting binary blob is both valid x86 shellcode and a valid bitmap image file (.bmp). The selected bitmap file to inject into must use the BM (Windows 3.1x/95/NT) header and the 40-byte Windows 3.1x/NT BITMAPINFOHEADER. Additionally the file must use either 24 or 32 bits per pixel as the color depth and no compression. This encoder makes absolutely no effort to remove any invalid characters.","options":[{"name":"BitmapFile","display_value":"","required":"true","description":"The .bmp file to inject into"}]}
[0m{"platform":"Unix","arch":"cmd","references":null,"name":"Bash Brace Expansion Command Encoder","fullname":"encoder/cmd/brace","authors":["wvu \u003cwvu@metasploit.com\u003e","egypt \u003cegypt@metasploit.com\u003e"],"rank":"Low","description":"This encoder uses brace expansion in Bash and other shells to avoid whitespace without being overly fancy.","options":[]}
[0m{"platform":"All","arch":"x86","references":null,"name":"BloXor - A Metamorphic Block Based XOR Encoder","fullname":"encoder/x86/bloxor","authors":["sf \u003cstephen_fewer@harmonysecurity.com\u003e"],"rank":"Manual","description":"A Metamorphic Block Based XOR Encoder.","options":[]}
[0m{"platform":"Unix","arch":"cmd","references":null,"name":"Bourne ${IFS} Substitution Command Encoder","fullname":"encoder/cmd/ifs","authors":["egypt \u003cegypt@metasploit.com\u003e","wvu \u003cwvu@metasploit.com\u003e"],"rank":"Low","description":"This encoder uses Bourne ${IFS} substitution to avoid whitespace without being overly fancy.","options":[]}
[0m{"platform":"All","arch":"mipsbe","references":null,"name":"Byte XORi Encoder","fullname":"encoder/mipsbe/byte_xori","authors":["Julien Tinnes \u003cjulien@cr0.org\u003e","juan vazquez \u003cjuan.vazquez@metasploit.com\u003e","Pedro Ribeiro \u003cpedrib@gmail.com\u003e"],"rank":"Normal","description":"Mips Web server exploit friendly xor encoder. This encoder has been found useful on situations where '\u0026' (0x26) is a badchar. Since 0x26 is the xor's opcode on MIPS architectures, this one is based on the xori instruction.","options":[]}
[0m{"platform":"All","arch":"mipsle","references":null,"name":"Byte XORi Encoder","fullname":"encoder/mipsle/byte_xori","authors":["Julien Tinnes \u003cjulien@cr0.org\u003e","juan vazquez \u003cjuan.vazquez@metasploit.com\u003e","Pedro Ribeiro \u003cpedrib@gmail.com\u003e"],"rank":"Normal","description":"Mips Web server exploit friendly xor encoder. This encoder has been found useful on situations where '\u0026' (0x26) is a badchar. Since 0x26 is the xor's opcode on MIPS architectures, this one is based on the xori instruction.","options":[]}
[0m{"platform":"All","arch":"x86","references":null,"name":"CPUID-based Context Keyed Payload Encoder","fullname":"encoder/x86/context_cpuid","authors":["Dimitris Glynos"],"rank":"Manual","description":"This is a Context-Keyed Payload Encoder based on CPUID and Shikata Ga Nai.","options":[{"name":"CPUID_KEY","display_value":"0x00000000","required":"true","description":"CPUID key from target host (see tools/context/cpuid-key utility)"}]}
[0m{"platform":"All","arch":"x86","references":null,"name":"Call+4 Dword XOR Encoder","fullname":"encoder/x86/call4_dword_xor","authors":["hdm \u003cx@hdm.io\u003e","spoonm \u003cspoonm@no$email.com\u003e"],"rank":"Normal","description":"Call+4 Dword XOR Encoder","options":[]}
[0m{"platform":"All","arch":"x64","references":null,"name":"Dynamic key XOR Encoder","fullname":"encoder/x64/xor_dynamic","authors":["lupman","phra"],"rank":"Normal","description":"An x64 XOR encoder with dynamic key size","options":[]}
[0m{"platform":"All","arch":"x86","references":null,"name":"Dynamic key XOR Encoder","fullname":"encoder/x86/xor_dynamic","authors":["lupman","phra"],"rank":"Normal","description":"An x86 XOR encoder with dynamic key size","options":[]}
[0m{"platform":"Unix","arch":"cmd","references":null,"name":"Echo Command Encoder","fullname":"encoder/cmd/echo","authors":["hdm \u003cx@hdm.io\u003e"],"rank":"Good","description":"This encoder uses echo and backlash escapes to avoid commonly restricted characters.","options":[]}
[0m{"platform":"Unix","arch":"cmd","references":null,"name":"Generic Shell Variable Substitution Command Encoder","fullname":"encoder/cmd/generic_sh","authors":["hdm \u003cx@hdm.io\u003e"],"rank":"Manual","description":"This encoder uses standard Bourne shell variable substitution tricks to avoid commonly restricted characters.","options":[]}
[0m{"platform":"Linux","arch":"x64","references":null,"name":"Hostname-based Context Keyed Payload Encoder","fullname":"encoder/x64/xor_context","authors":["sfoso"],"rank":"Normal","description":"Context-Keyed Payload Encoder based on hostname and x64 XOR encoder.","options":[{"name":"C_HOSTNAME","display_value":"hostname","required":"true","description":"Context Hostname."}]}
[0m{"platform":"All","arch":"x86","references":null,"name":"Jump/Call XOR Additive Feedback Encoder","fullname":"encoder/x86/jmp_call_additive","authors":["skape \u003cmmiller@hick.org\u003e"],"rank":"Normal","description":"Jump/Call XOR Additive Feedback","options":[]}
[0m{"platform":"All","arch":"x86","references":null,"name":"Non-Alpha Encoder","fullname":"encoder/x86/nonalpha","authors":["pusscat \u003cpusscat@metasploit.com\u003e"],"rank":"Low","description":"Encodes payloads as non-alpha based bytes. This allows payloads to bypass both toupper() and tolower() calls, but will fail isalpha(). Table based design from Russel Sanford.","options":[]}
[0m{"platform":"All","arch":"x86","references":null,"name":"Non-Upper Encoder","fullname":"encoder/x86/nonupper","authors":["pusscat \u003cpusscat@metasploit.com\u003e"],"rank":"Low","description":"Encodes payloads as non-alpha based bytes. This allows payloads to bypass tolower() calls, but will fail isalpha(). Table based design from Russel Sanford.","options":[]}
[0m{"platform":"All","arch":"php","references":null,"name":"PHP Base64 Encoder","fullname":"encoder/php/base64","authors":["egypt \u003cegypt@metasploit.com\u003e"],"rank":"Great","description":"This encoder returns a base64 string encapsulated in eval(base64_decode()), increasing the size by a bit more than one third.","options":[]}
[0m{"platform":"All","arch":"ppc","references":null,"name":"PPC LongXOR Encoder","fullname":"encoder/ppc/longxor","authors":["ddz \u003cddz@theta44.org\u003e","hdm \u003cx@hdm.io\u003e"],"rank":"Normal","description":"This encoder is ghandi's PPC dword xor encoder with some size tweaks by HDM.","options":[]}
[0m{"platform":"All","arch":"ppc","references":null,"name":"PPC LongXOR Encoder","fullname":"encoder/ppc/longxor_tag","authors":["ddz \u003cddz@theta44.org\u003e","hdm \u003cx@hdm.io\u003e"],"rank":"Normal","description":"This encoder is ghandi's PPC dword xor encoder but uses a tag-based terminator rather than a length.","options":[]}
[0m{"platform":"Unix","arch":"cmd","references":null,"name":"Perl Command Encoder","fullname":"encoder/cmd/perl","authors":["hdm \u003cx@hdm.io\u003e"],"rank":"Normal","description":"This encoder uses perl to avoid commonly restricted characters.","options":[]}
[0m{"platform":"All","arch":"x86","references":null,"name":"Polymorphic XOR Additive Feedback Encoder","fullname":"encoder/x86/shikata_ga_nai","authors":["spoonm \u003cspoonm@no$email.com\u003e"],"rank":"Excellent","description":"This encoder implements a polymorphic XOR additive feedback encoder. The decoder stub is generated based on dynamic instruction substitution and dynamic block ordering. Registers are also selected dynamically.","options":[]}
[0m{"platform":"Windows","arch":"cmd","references":null,"name":"Powershell Base64 Command Encoder","fullname":"encoder/cmd/powershell_base64","authors":["Ben Campbell \u003ceat_meatballs@hotmail.co.uk\u003e"],"rank":"Excellent","description":"This encodes the command as a base64 encoded command for powershell.","options":[]}
[0m{"platform":"All","arch":"x86","references":null,"name":"Register Service","fullname":"encoder/x86/service","authors":["agix"],"rank":"Manual","description":"Register service if used with psexec for example","options":[]}
[0m{"platform":"All","arch":"ruby","references":null,"name":"Ruby Base64 Encoder","fullname":"encoder/ruby/base64","authors":["Robin Stenvi \u003crobin.stenvi@gmail.com\u003e"],"rank":"Great","description":"This encoder returns a base64 string encapsulated in eval(%(base64 encoded string).unpack(%(m0)).first).","options":[]}
[0m{"platform":"All","arch":"sparc","references":null,"name":"SPARC DWORD XOR Encoder","fullname":"encoder/sparc/longxor_tag","authors":["optyx \u003coptyx@no$email.com\u003e","hdm \u003cx@hdm.io\u003e"],"rank":"Normal","description":"This encoder is optyx's 48-byte SPARC encoder with some tweaks.","options":[]}
[0m{"platform":"All","arch":"x86","references":null,"name":"Single Static Bit","fullname":"encoder/x86/single_static_bit","authors":["jduck \u003cjduck@metasploit.com\u003e"],"rank":"Manual","description":"Static value for specific bit","options":[]}
[0m{"platform":"All","arch":"x86","references":null,"name":"Single-byte XOR Countdown Encoder","fullname":"encoder/x86/countdown","authors":["vlad902 \u003cvlad902@gmail.com\u003e"],"rank":"Normal","description":"This encoder uses the length of the payload as a position-dependent encoder key to produce a small decoder stub.","options":[]}
[0m{"platform":"All","arch":"x86","references":null,"name":"Sub Encoder (optimised)","fullname":"encoder/x86/opt_sub","authors":["OJ Reeves \u003coj@buffered.io\u003e"],"rank":"Manual","description":"Encodes a payload using a series of SUB instructions and writing the encoded value to ESP. This concept is based on the known SUB encoding approach that is widely used to manually encode payloads with very restricted allowed character sets. It will not reset EAX to zero unless absolutely necessary, which helps reduce the payload by 10 bytes for every 4-byte chunk. ADD support hasn't been included as the SUB instruction is more likely to avoid bad characters anyway. The payload requires a base register to work off which gives the start location of the encoder payload in memory. If not specified, it defaults to ESP. If the given register doesn't point exactly to the start of the payload then an offset value is also required. Note: Due to the fact that many payloads use the FSTENV approach to get the current location in memory there is an option to protect the start of the payload by setting the 'OverwriteProtect' flag to true. This adds 3-bytes to the start of the payload to bump ESP by 32 bytes so that it's clear of the top of the payload.","options":[{"name":"OverwriteProtect","display_value":"false","required":"false","description":"Indicate if the encoded payload requires protection against being overwritten"},{"name":"ValidCharSet","display_value":"","required":"false","description":"Specify a known set of valid chars (ALPHA, ALPHANUM, FILEPATH)"}]}
[0m{"platform":"All","arch":"x86, x86_64, x64, mips, mipsle, mipsbe, mips64, mips64le, ppc, ppce500v2, ppc64, ppc64le, cbea, cbea64, sparc, sparc64, armle, armbe, aarch64, cmd, php, tty, java, ruby, dalvik, python, nodejs, firefox, zarch, r","references":null,"name":"The \"none\" Encoder","fullname":"encoder/generic/none","authors":["spoonm \u003cspoonm@no$email.com\u003e"],"rank":"Normal","description":"This \"encoder\" does not transform the payload in any way.","options":[]}
[0m{"platform":"All","arch":"x86, x86_64, x64, mips, mipsle, mipsbe, mips64, mips64le, ppc, ppce500v2, ppc64, ppc64le, cbea, cbea64, sparc, sparc64, armle, armbe, aarch64, cmd, php, tty, java, ruby, dalvik, python, nodejs, firefox, zarch, r","references":null,"name":"The EICAR Encoder","fullname":"encoder/generic/eicar","authors":["todb \u003ctodb@metasploit.com\u003e"],"rank":"Manual","description":"This encoder merely replaces the given payload with the EICAR test string. Note, this is sure to ruin your payload. Any content-aware firewall, proxy, IDS, or IPS that follows anti-virus standards should alert and do what it would normally do when malware is transmitted across the wire.","options":[]}
[0m{"platform":"All","arch":"x86","references":null,"name":"Variable-length Fnstenv/mov Dword XOR Encoder","fullname":"encoder/x86/fnstenv_mov","authors":["spoonm \u003cspoonm@no$email.com\u003e"],"rank":"Normal","description":"This encoder uses a variable-length mov equivalent instruction with fnstenv for getip.","options":[]}
[0m{"platform":"All","arch":"mipsbe","references":null,"name":"XOR Encoder","fullname":"encoder/mipsbe/longxor","authors":["Julien Tinnes \u003cjulien@cr0.org\u003e","Pedro Ribeiro \u003cpedrib@gmail.com\u003e"],"rank":"Normal","description":"Mips Web server exploit friendly xor encoder","options":[]}
[0m{"platform":"All","arch":"mipsle","references":null,"name":"XOR Encoder","fullname":"encoder/mipsle/longxor","authors":["Julien Tinnes \u003cjulien@cr0.org\u003e","Pedro Ribeiro \u003cpedrib@gmail.com\u003e"],"rank":"Normal","description":"Mips Web server exploit friendly xor encoder","options":[]}
[0m{"platform":"All","arch":"x64","references":null,"name":"XOR Encoder","fullname":"encoder/x64/xor","authors":["sf \u003cstephen_fewer@harmonysecurity.com\u003e"],"rank":"Normal","description":"An x64 XOR encoder. Uses an 8 byte key and takes advantage of x64 relative addressing.","options":[]}
[0m{"platform":"All","arch":"x86","references":null,"name":"XOR POLY Encoder","fullname":"encoder/x86/xor_poly","authors":["Arthur RAOUT"],"rank":"Normal","description":"An x86 Simple POLY Xor encoding method. using polymorphism Register swapping, and instructions modification","options":[]}
[0m{"platform":"All","arch":"x64","references":null,"name":"Zutto Dekiru","fullname":"encoder/x64/zutto_dekiru","authors":["agix"],"rank":"Manual","description":"Inspired by shikata_ga_nai using fxsave64 to work under x64 systems.","options":[]}
[0m{"platform":"Unix","arch":"cmd","references":null,"name":"printf(1) via PHP magic_quotes Utility Command Encoder","fullname":"encoder/cmd/printf_php_mq","authors":["jduck \u003cjduck@metasploit.com\u003e"],"rank":"Manual","description":"This encoder uses the printf(1) utility to avoid restricted characters. Some shell variable substitution may also be used if needed symbols are blacklisted. Some characters are intentionally left unescaped since it is assumed that PHP with magic_quotes_gpc enabled will escape them during request handling.","options":[]}
[0m{"platform":"All","arch":"x86","references":null,"name":"stat(2)-based Context Keyed Payload Encoder","fullname":"encoder/x86/context_stat","authors":["Dimitris Glynos"],"rank":"Manual","description":"This is a Context-Keyed Payload Encoder based on stat(2) and Shikata Ga Nai.","options":[{"name":"STAT_FILE","display_value":"/bin/ls","required":"true","description":"name of file to stat(2)"},{"name":"STAT_KEY","display_value":"0x00000000","required":"true","description":"STAT key from target host (see tools/context/stat-key utility)"}]}
[0m{"platform":"All","arch":"x86","references":null,"name":"time(2)-based Context Keyed Payload Encoder","fullname":"encoder/x86/context_time","authors":["Dimitris Glynos"],"rank":"Manual","description":"This is a Context-Keyed Payload Encoder based on time(2) and Shikata Ga Nai.","options":[{"name":"TIME_KEY","display_value":"0x00000000","required":"true","description":"TIME key from target host (see tools/context/time-key utility)"}]}
[0m